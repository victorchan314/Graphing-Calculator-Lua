--the screen is 480x320 pixels
--Graphing Calculator
--by Victor Chan



x = 0;
z = x^2

graph = display.newGroup()

io.write("Please type in your lower x bound: ")
lowerxbound = io.read("*number")
io.write("Please type in your upper x bound: ")
upperxbound = io.read("*number")
io.write("Please type in your lower y bound: ")
lowerybound = io.read("*number")
io.write("Please type in your upper y bound: ")
upperybound = io.read("*number")
io.write("Red: Original Function","\n","Green: First Derivative","\n","Blue: Second Derivative","\n","Yellow: Relative Extremum","\n","Magenta: Concave Up","\n","Turquoise: Concave Down","\n","Orange: Point of Inflection","\n")

xaxisunits = display.contentWidth / ( upperxbound - lowerxbound )
yaxisunits = display.contentHeight / ( upperybound - lowerybound )
xaxis = display.newRect( graph, display.contentWidth / 2, display.contentHeight + ( lowerybound * yaxisunits ), display.contentWidth, 2 )
yaxis = display.newRect( graph, display.contentWidth - ( upperxbound * xaxisunits ), display.contentHeight / 2, 2, display.contentHeight )

abscissa = 0
ordinate = display.contentHeight / 2
ordinate2 = display.contentHeight / 2
ordinate3 = display.contentHeight / 2
for x=lowerxbound, upperxbound, ( ( upperxbound - lowerxbound ) / 20000 ) do
	abscissa1 = abscissa
	ordinate1 = ordinate
	abscissa = x
--this is the place where the function should be added to graph
--///////////////////////////////////////////////////////////////////////
--///////////////////////////////////////////////////////////////////////
--///////////////////////////////////////////////////////////////////////
--///////////////////////////////////////////////////////////////////////
--///////////////////////////////////////////////////////////////////////
--///////////////////////////////////////////////////////////////////////
--///////////////////////////////////////////////////////////////////////
--///////////////////////////////////////////////////////////////////////
	numerator = x^5-x^3+3*x^4-2^x
	denominator = 1
--///////////////////////////////////////////////////////////////////////
--///////////////////////////////////////////////////////////////////////
--///////////////////////////////////////////////////////////////////////
--///////////////////////////////////////////////////////////////////////
--///////////////////////////////////////////////////////////////////////
--///////////////////////////////////////////////////////////////////////
--///////////////////////////////////////////////////////////////////////
--///////////////////////////////////////////////////////////////////////
	ordinate = numerator / denominator
	ordinate2 = ordinate3
	ordinate3 = ( ordinate - ordinate1 ) / ( abscissa - abscissa1 )
	point = display.newRect( graph, ( abscissa * xaxisunits ) + display.contentWidth - ( upperxbound * xaxisunits ), display.contentHeight + ( lowerybound * yaxisunits ) - ( ordinate * yaxisunits ), 3, 3 )
	point1 = display.newRect( graph, ( abscissa * xaxisunits ) + display.contentWidth - ( upperxbound * xaxisunits ), display.contentHeight + ( lowerybound * yaxisunits ) - ( ( ( ordinate - ordinate1 ) / ( abscissa - abscissa1 ) ) * yaxisunits ), 2, 2 )
	point2 = display.newRect( graph, ( abscissa * xaxisunits ) + display.contentWidth - ( upperxbound * xaxisunits ), display.contentHeight + ( lowerybound * yaxisunits ) - ( ( ( ordinate3 - ordinate2 ) / ( abscissa - abscissa1 ) ) * yaxisunits ), 2, 2 )

	if (math.abs(ordinate3) < 0.001) then
		point:setFillColor( 1, 1, 0 )
		point.width = 10
		point.height = 10
	else
		point:setFillColor( 1, 0, 0 )
	end
	if (( ordinate3 - ordinate2 ) / ( abscissa - abscissa1 ) > 0.001 and ( ordinate3 - ordinate2 ) / ( abscissa - abscissa1 ) < 100000000 ) then
		point3 = display.newRect( graph, ( abscissa * xaxisunits ) + display.contentWidth - ( upperxbound * xaxisunits ), display.contentHeight + ( lowerybound * yaxisunits ) - ( ordinate * yaxisunits ) + 10, 2, 2 )
		point3:setFillColor( 1, 0, 1)
	elseif ( ( ordinate3 - ordinate2 ) / ( abscissa - abscissa1 ) < -0.001 and ( ordinate3 - ordinate2 ) / ( abscissa - abscissa1 ) > -100000000 ) then
		point3 = display.newRect( graph, ( abscissa * xaxisunits ) + display.contentWidth - ( upperxbound * xaxisunits ), display.contentHeight + ( lowerybound * yaxisunits ) - ( ordinate * yaxisunits ) + 10, 2, 2 )
		point3:setFillColor( 0, 1, 1 )
	elseif (math.abs( ( ordinate3 - ordinate2 ) / ( abscissa - abscissa1 ) ) < 0.001 ) then
		point:setFillColor( 1, .5, 0 )
		point.width = 10
		point.height = 10
	else
		point:setFillColor( 1, 0, 0 )
	end
	if ( math.abs(denominator) < 0.05 and math.abs(numerator) > 0.001 ) then
		vertasymp = display.newLine( graph, abscissa,0, abscissa,display.contentHeight )
		vertasymp:setStrokeColor( 148 / 255, 0, 211 / 255 )
	elseif ( math.abs(denominator) < 0.075 and math.abs(numerator) < 0.001 ) then
		point:setFillColor( 148 / 255, 0, 211 / 255 )
		point.width = 10
		point.height = 10
	elseif (math.abs(ordinate3) > 0.001) then
		point:setFillColor( 1, 0, 0 )
	end
	point1:setFillColor( 0, 1, 0 )
	point2:setFillColor( 0, 0, 1 )
end








































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































